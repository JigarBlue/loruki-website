@import url('https://fonts.googleapis.com/css2?family=Lato:wght@300&display=swap');

/*root scope: we can use this anywhere*/
:root {
    /* custom properties */
    --primary-color: #047aed; 
    /*we can change to whatever colour we want and
     it will make chnages to everywhere*/
    --secondary-color: #1c3fa8; 
    --dark-color: #002240; 
    --light-color: #f4f4f4; 
    --success-color: #5cb85c;
    --error-color: #d9534f; /*for alert*/
}

* {
    /*remove default padding and margin*/
    box-sizing: border-box;
    padding: 0;
    margin: 0;
}

body {
    font-family: 'Lato', sans-serif;
    color: #333;
    line-height: 1.6;
}

ul {
    list-style-type: none; /*no bullet points*/
}

a {
    text-decoration: none;
    color: #333;
}

h1, h2 {
    font-weight: 300;
    line-height: 1.2;
    margin: 10px 0;
}

p {
    margin: 10px 0;
}

img {
    width: 100%;
}

/*Docs page: install via code $ mac, npm, yarn*/
code, pre {
    background: #333;
    color: #fff;
    padding: 10px;
}

/*Spam Protection: hide*/
.hidden {
    visibility: hidden;
    height: 0;
}

/* Navbar */
.navbar {
    background-color: var(--primary-color); /*defined in root*/
    color: #fff;
    height: 70px;
}

.navbar ul {
    display: flex;
}

.navbar a {
    color: #fff;
    padding: 10px;
    margin: 0 5px;
}

.navbar a:hover {
    border-bottom: 2px #fff solid;
}

/*if flex is in navbar then do this*/
.navbar .flex {
    justify-content: space-between;
}

/* Showcase */
.showcase {
    height: 400px;
    background-color: var(--primary-color);
    color: #fff;
    position: relative;
}

.showcase h1 {
    font-size: 40px;
}

.showcase p {
    margin: 20px 0;
}

.showcase .grid {
    overflow: visible; /*removes the scroller bar from grid*/
    grid-template-columns: 55% 45%; /*55% for text part and 45% for form part*/
    gap: 30px;
}

/*apply the animation to elements
 Home Page : Easier Deployment and its Read More Button*/
.showcase-text {
    /* set animation to, so we want it to come from the left,
    so set it to slideInFromLeft, and set the duration to 1 second, 
    and do ease-in for smoothness (for coming in from left)*/
    animation: slideInFromLeft 1s ease-in;
}

.showcase-form {
    /*if you want to do left, top, right, bottom,
    then use position relative or absolute*/
    position: relative;
    top: 60px;
    height: 350px;
    width: 400px;
    padding: 40px;
    z-index: 100; /*to ensure its always in front*/
    animation: slideInFromRight 1s ease-in; /*the form will slide in from right side*/
}

/*styling for inside the form*/
.showcase-form .form-control {
    margin: 30px 0; /*30 top bottom, 0 left*/
}

/*input fields*/
.showcase-form input[type='text'],
.showcase-form input[type='email'] {
    border: 0;
    border-bottom: 1px solid #b4becb;
    width: 100%;
    padding: 3px;
    font-size: 16px;
}

/*remove border when we click the input field box*/
.showcase-form input:focus {
    outline: none;
}

/*slant near form or blue background color*/
.showcase::before, .showcase::after {
    content: '';
    position: absolute;
    height: 100px;
    bottom: -70px;
    right: 0;
    left: 0;
    background: #fff;
    transform: skewY(-3deg);
    /*prefixes for browsers*/
    -webkit-transform: skewY(-3deg); /*chrome and safari*/
    -moz-transform: skewY(-3deg); /*Mozirilla web*/
    -ms-transform: skewY(-3deg); /*microsoft edge*/
}

/* Stats (Home Page: Deployments, Published, projects)*/
.stats {
    padding-top: 100px;
    animation: slideInFromBottom 1s ease-in; /*the stats will slide in from bottom*/
}

.stats-heading {
    max-width: 500px;
    margin: auto;
}

.stats .grid h3 {
    font-size: 35px;
}

.stats .grid p {
    font-size: 20px;
    font-weight: bold;
}

/* Cli */
.cli .grid {
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(2, 1fr);
}

/*Take cli and grid, and we want the first item, so we'll use an angle bracket > 
 and use *, so anything that is the first child so what it means is:
 in our html in cli, class container grid, so in there, whatever the first child is,
 which in this case is img src images/cli.png */
.cli .grid > *:first-child {
    /*so the first child which is image cli.png, it will span from grid 1 to 2 like it will expand 
    in total we have 3 colums so this will go from 1 to 2*/
    grid-column: 1 / span 2;
    grid-row: 1 / span 2; /*this will expand twoards down so it expands in 2 rows*/
}

/* Cloud */
.cloud .grid {
    grid-template-columns: 4fr 3fr;
}

/* Languages */
.languages .flex{
    flex-wrap: wrap;
}

.languages .card{
    text-align: center;
    margin: 18px 10px 40px; /*top-bottom, side, down*/
    transition: transform 0.2s ease-in; /*card hover transition*/
}

/*inside card text*/
.languages .card h4 {
    font-size: 20px;
    margin-bottom: 10px;
}

/*translateY will move it along the Y axis and we want the card to go up, 
so we'll do negative, so -15px, 
positive 15px will make it move up */
.languages .card:hover {
    transform: translateY(-15px);
}

/* Docs top page */
.features-head img, .docs-head img {
    width: 200px;
    justify-self: flex-end; /*just this image will be aligned at the end of the column*/
}

.features-sub-head img {
    width: 300px;
    justify-self: flex-end; /*move at the end of the column*/
}

/* style the card icon, add margins to the card icon
so in the card, use angle > for the intial icon or the direct icon
so this wil put some space between the icons*/
.features-main .card > i {
    margin-right: 20px;
}

/*for the card icon grid*/
.features-main .grid {
    padding: 30px;
}

/*card icon: fa-server
will do card expansion
use angle > * 
so we want the first element, so we'll use * which is the universal selector 
colon : first child 
*/
.features-main .grid > *:first-child {
    /*set grid column to 1 and span that to 3
    so it will be expanded to 3 columns*/
    grid-column: 1 / span 3;
}

/* card icon: fa-wired network
nth child is: second, third or whichever you want,
you put the child number in bracket like nth-child(2)
in this case we want second one so will pass 2 */
.features-main .grid > *:nth-child(2) {
    /*set grid column to 1 and span that to 2
    so it will be expanded to 2 columns across*/
    grid-column: 1 / span 2;
}

/* Docs */
.docs-main h3{
    margin: 20px 0;
}

.docs-main .grid {
    /*1 fraction for essential and 2 fraction for intro*/
    grid-template-columns: 1fr 2fr;
    /*this is basically a row, so align items is going to be along the y-axis*/
    align-items: flex-start; /*align essential with intro at top (side by side)*/
}

/*essentials*/
.docs-main nav li {
    font-size: 17px;
    padding-bottom: 5px;
    margin-bottom: 5px;
    border-bottom: 1px #ccc solid;
}

/*essentials*/
.docs-main a:hover {
    font-weight: bold;
}

/* Footer: social icons */
.footer .social a {
    margin: 0 10px;
}

/* Animations *
using keyframes: will slide in certain content from the right, left, top, and bottom
so were just going to manipulate translate X and translate Y */
@keyframes slideInFromLeft {
    /* position on the x-axis to negative -100 
    which will start off the screen, so negative value will push it towards left on the x-axis 100%
     */
    0% {
        transform: translateX(-100%);
    }
    /*and we want it to end up to x-axis 0, to its normal position.*/
    100% {
        transform: translateX(0);
    }
}

@keyframes slideInFromRight {
    /* for Right, we want the translate X to be postive 100% 
    which will be towards the right side of the screen
     */
    0% {
        transform: translateX(100%);
    }
    /*and we want it to end up to same place to translated X 0, 
    to x-axis 0, to its normal position.*/
    100% {
        transform: translateX(0);
    }
}

/*now we want to slide it from top*/
@keyframes slideInFromTop {
    /* for top, will change the translate X to Y
    so will start up above the screen and translate Y will be negative -100%
     */
    0% {
        transform: translateY(-100%);
    }
    /*and it will end up at translate X 0, and that should side in from top*/
    100% {
        transform: translateX(0);
    }
}

/*now we want to slide it from bottom*/
@keyframes slideInFromBottom {
    /* for bottom, translate Y will be positive 100%
     */
    0% {
        transform: translateY(100%);
    }
    /*and it will end up at translate X 0, 
    and that should side in from top*/
    100% {
        transform: translateX(0);
    }
}


/**************************************************************************************/
/* Tablets and under */
/* Anything under 768px  will be styled in mobile media query*/
@media(max-width: 768px) {
    .grid,
    .showcase .grid,
    .stats .grid,
    .cli .grid,
    .cloud .grid,
    .features-main .grid,
    .docs-main .grid {
        grid-template-columns: 1fr;
        grid-template-rows: 1fr;
    }

    /*top blue background*/
    .showcase {
        height: auto;
    }

    .showcase-text {
        text-align: center;
        margin-top: 40px;
        animation: slideInFromTop 1s ease-in; /*the top bit (easier deployment) will slide from top*/
    }

    .showcase-form {
        /*We've used justify contains couple of times,
        and that will be on a flex box container or grid container
        and it justifies all the elements inside.
        justify self is you put it on actual grid or flex item
        to justify just that item which will set to center*/
        justify-self: center; /*moves form in middle*/
        margin: auto;
        animation: slideInFromBottom 1s ease-in; /*the form will slide from bottom*/
    }

    .cli .grid > *:first-child {
    grid-column: 1;
    grid-row: 1; 
    }

    .features-head,
    .features-sub-head,
    .docs-head {
        text-align: center;
    }

    .features-head img,
    .features-sub-head img,
    .docs-head img{
        justify-self: center;
    }

    /*we want the first child coz that's the one we span 3, 
    so > * any element that is the first child */
    .features-main .grid > *:first-child,
    .features-main .grid > *:nth-child(2) {
        grid-column: 1;
    }
}


/* Mobile: under 500px */
@media(max-width: 500px) {
    /*we'll put menu items under the logo,
    so we'll have more room for menu items */
    .navbar {
        height: 110px;
    }

    /* this will put the logo and 
    the ul or the nav on top of each other */
    .navbar .flex {
        flex-direction: column;
    }

    /*Top Nav Bar: Home, Features, Docs*/
    .navbar ul {
        padding: 10px;
        background-color: rgba(0, 0, 0, 0.1);
    }
}